<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help()
 */
function username_validation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.username_validation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Username validation') . '</p>';
      $output .= '<p>' . t('This module helps to validate the username field value based on the configurations. for more info visit <a href="@link">here</a>.', ['@link' => 'https://www.drupal.org/project/username_validation']) . '</p>';
      return $output;
  }
}

/**
 * Implement hook_form_alter().
 */
function username_validation_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('username_validation.usernamevalidationconfig');
  $username_label = $config->get('user_label');
  $username_desc = $config->get('user_desc');
  $username_ajax_value = $config->get('ajax_validation');
  $username_ajax = isset($username_ajax_value) ? $username_ajax_value : '';
  if ($form_id == 'user_form' || $form_id == 'user_register_form') {
    $form['#validate'][] = 'username_validation_username_validate';
    if (isset($username_label) && !empty($username_label)) {
      $form['account']['name']['#title'] = $username_label;
    }
    if (isset($username_desc) && !empty($username_desc)) {
      $form['account']['name']['#description'] = $username_desc;
    }
    if ($username_ajax == 1) {
      $form['account']['name']['#suffix'] = "<div id='username-validation-ajax'></div>";
      $form['account']['name']['#ajax'] = [
        'callback' => 'username_validation_ajax',
        'event' => 'change',
      ];
    }
  }
}

/**
 * Callback to get username from database.
 *
 * @return object
 *   User object.
 */
function _get_username_from_db() {
  // Find the stored username from database.
  $current_path = \Drupal::service('path.current')->getPath();
  $path_array = explode("/", $current_path);
  $connection = \Drupal::database();
  $query = $connection->select('users_field_data', 'u');
  $query->fields('u', ['name']);
  $query->condition('u.uid', $path_array[2]);
  return $query->execute()->fetchObject();
}

/**
 * Ajax callback for validating the username.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function username_validation_ajax(&$form, &$form_state) {
  $config = \Drupal::config('username_validation.usernamevalidationconfig');
  $username = $form_state->getvalues()['name'];
  $label = $form['account']['name']['#title'];
  $blacklist_char_value = $config->get('blacklist_char');
  $max_char = $config->get('max_char');
  $min_char = $config->get('min_char');
  $avoid_spaces = $config->get('avoid_spaces');
  $blacklist_char = isset($blacklist_char_value) ? $blacklist_char_value : '';
  $findings = NULL;
  if (!empty($blacklist_char)) {
    // Replace \r\n with comma.
    $blacklist_char = str_replace("\r\n", ',', $blacklist_char);

    // Store into array.
    $blacklist_char = explode(',', $blacklist_char);

    $name = _get_username_from_db();
    if ($name->name != $username) {
      $findings = _username_validation_search_excludes_in_title($username, $blacklist_char);
    }
  }

  $ajax_response = new AjaxResponse();
  $ajax_response->addCommand(new HtmlCommand('#username-validation-ajax', ''));
  if (strlen($username) < $min_char) {
    $value = '<div class ="messages messages--error">' . $label . ' should have minimum of ' . $min_char . ' characters</div>';
    $ajax_response->addCommand(new HtmlCommand('#username-validation-ajax', $value));
  }

  if (strlen($username) > $max_char) {
    $value = '<div class ="messages messages--error">' . $label . ' should have maximum of ' . $max_char . ' characters</div>';
    $ajax_response->addCommand(new HtmlCommand('#username-validation-ajax', $value));
  }

  if ($findings) {
    $value = '<div class ="messages messages--error">The characters/words are not allowed to enter in the username - ' . $findings[0] . ' </div>';
    $ajax_response->addCommand(new HtmlCommand('#username-validation-ajax', $value));
  }

  if ($avoid_spaces && preg_match('/\s/',$username)) {
    $value = '<div class ="messages messages--error">Username contains spaces</div>';
    $ajax_response->addCommand(new HtmlCommand('#username-validation-ajax', $value));
  }

  return $ajax_response;
}

/**
 * @array type $form
 * @array type $form_state
 * Validates the username based on the configuration
 */
function username_validation_username_validate($form, &$form_state) {
  $config = \Drupal::config('username_validation.usernamevalidationconfig');
  $username = $form_state->getvalues()['name'];
  $label = $form['account']['name']['#title'];
  $blacklist_char = $config->get('blacklist_char');
  $max_char = $config->get('max_char');
  $min_char = $config->get('min_char');
  $avoid_spaces = $config->get('avoid_spaces');
  if (!empty($blacklist_char)) {
    // Replace \r\n with comma.
    $blacklist_char = str_replace("\r\n", ',', $blacklist_char);

    // Store into array.
    $blacklist_char = explode(',', $blacklist_char);

    $name = _get_username_from_db();
    if ($name->name != $username) {
      $findings = _username_validation_search_excludes_in_title($username, $blacklist_char);

      if ($findings) {
        $form_state->setErrorByName('name', t('The characters/words are not allowed to enter in the username - @findings', ['@findings' => implode(',', $findings)]));
      }
    }
  }

  // Check for spaces.
  if ($avoid_spaces && preg_match('/\s/',$username)) {
    $form_state->setErrorByName('name', t('name contains spaces'));
  }
          
  if (strlen($username) < $min_char) {
    $form_state->setErrorByName('name', t($label . ' should have minimum of ' . $min_char . ' characters'));
  }
  if (strlen($username) > $max_char) {
    $form_state->setErrorByName('name', t($label . ' should have maximum of ' . $max_char . ' characters'));
  }
}

/**
 * Helper function to find any exclude values in username.
 */
function _username_validation_search_excludes_in_title($input, $find) {
  $findings = [];
  // Finding characters in the node title.
  foreach ($find as $char) {
    // Check for single character.
    if (mb_strlen($char) == 1) {
      if (strpos($input, trim($char)) !== FALSE) {
        $findings[] = trim($char);
      }
    }
  }

  // Finding words in the node title.
  $words = explode(',', $input);
  foreach ($words as $word) {
    $word = trim($word);
    if (in_array($word, $find)) {
      $findings[] = $word;
    }
  }

  return $findings;
}
